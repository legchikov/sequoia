from string import Formatter
from config import VERSION


def multi(func):
    matrix = ['//Generated by Sequoia v.{}'.format(VERSION)]

    def inner(*args):
        action = args[0]
        generator = args[1]

        if action.name == 'SetStatic':
            header = action.header + ',' + ','.join('#'+str(x) for x in generator.keys())
            message = action.template + ',' + ','.join(str(x) for x in generator.values())

            matrix.append('')
            matrix.append(header)
            matrix.append(message)
        else:
            try:
                matrix.append('')
                matrix.append(action.header)
                for params in generator:
                    check_params(action.template, params.keys())
                    message = func(action, **params)
                    matrix.append(message)
            except AttributeError as e:
                print(e)
            except DoNotMatchError as e:
                print(e)
                print(e.unmatched)
                return

    return inner


@multi
def sc(action, **params):
    return action.template.format(**params)


def render(fn):
    return fn.__closure__[1].cell_contents


def check_params(action, generator_params):
    action_params = get_action_params(action)
    diff = set(action_params) - set(generator_params)

    if diff:
        raise DoNotMatchError(diff)


def get_action_params(action):
    return [fn for _, fn, _, _ in Formatter().parse(action) if fn is not None]


class DoNotMatchError(Exception):
    def __init__(self, unmatched):

        # Call the base class constructor with the parameters it needs
        super().__init__('Error: The following parameters do not match:')

        # list of unmatched parameters
        self.unmatched = '[' + ', '.join(unmatched) + ']'
