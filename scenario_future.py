import random
from string import Formatter
from config import VERSION, PATH_BASELINES, PATH_CONFIGS, PATH_OUTPUT
from scheduler import SCHEDULER_HEADER, make_scheduler_config


class SC:
    def __init__(self):
        self.matrix = ['//Generated by Sequoia v.{}'.format(VERSION)]
        self.scheduler_config = [SCHEDULER_HEADER]
        self.checksum = []

    def add_step(self, action, step, generator, chkfn=None):
        self.matrix.append('')
        self.matrix.append(action.header)
        self.scheduler_config.append(make_scheduler_config(step))

        try:
            for params in generator:
                mes = action.format(step=step, **params)
                if chkfn is not None:
                    self.checksum.append(chkfn(params))
                self.matchparams(action, params)
                self.matrix.append(mes)

        except AttributeError as e:
            print(e)
        except DoNotMatchError as e:
            print(e)
            print(e.unmatched)
            return

    def add_static_step(self):
        pass

    def get_matrix(self):
        return self.matrix

    def get_config(self):
        return self.scheduler_config

    def get_checksum(self):
        return sum(self.checksum)

    def matchparams(self, action, generator_params):
        action_params = self.get_action_params(action)
        diff = set(action_params) - set(generator_params.keys())

        if diff:
            raise DoNotMatchError(diff)

    def get_action_params(self, action):
        return [fn for _, fn, _, _ in Formatter().parse(action) if fn is not None]


class DoNotMatchError(Exception):
    def __init__(self, unmatched):
        super().__init__('Error: The following parameters do not match:')

        self.unmatched = '[' + ', '.join(unmatched) + ']'


class Generator:
    def __init__(self):
        pass

    def si_generator(self, n):
        d = {
            'id': 0,
            'price': 0
        }

        for _ in range(n):
            d['id'] = random.randint(1, 10)
            d['price'] = random.randint(1, 10)

            yield d

    def deal_generator(self, n):
        d = {
            'id': 0,
            'price': 0,
            'qty': 0
        }

        for _ in range(n):
            d['id'] = random.randint(1, 10)
            d['price'] = random.randint(1, 10)
            d['qty'] = random.randint(10, 100)

            yield d

h_si = '#id,step,action,price'
tmp_si = '{id},{step},SendSI,{price}'

h_deal = '#id,step,action,price,qty'
tmp_deal = '{id},{step},SendDeal,{price},{qty}'

sc = SC()
g = Generator()
sc.add_step(tmp_deal, h_si, 'send_deal', g.deal_generator(10))
sc.add_step(tmp_si, h_si, 'send_si', g.si_generator(10))
m = sc.get_matrix()

for x in m:
    print(x)